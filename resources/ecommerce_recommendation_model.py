# -*- coding: utf-8 -*-
"""ecommerce_recommendation_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ndFfwcHzzs0nas3ZslyTg4tqY6MB7Hn_
"""

!pip install implicit

"""# E-Commerce Recommendation System Model Training

This notebook builds and trains a recommendation model for our Django e-commerce application.

## Approach:
1. Use a dataset of past purchases to build a recommendation model.
2. Use a machine learning approach like collaborative filtering (ALS from implicit library) or content-based filtering (TF-IDF, cosine similarity).
3. Save trained models as pickle files

## Import the dependencies
"""

import pandas as pd
import numpy as np
import scipy.sparse as sparse
from implicit.als import AlternatingLeastSquares
import joblib
import re

"""## Load the dataset"""

# Load sample transaction data
df = pd.read_csv("/content/dummy/ecommerce_product_dataset.csv")

"""## View the columns of the dataset"""

df.columns

"""# View the first 5 rows of the dataset"""

df.head()

"""## View a column from the dataset"""

df["ProductID"]

"""## Create a sparse matrix"""

# Create an item-user sparse matrix
user_item_matrix = df.pivot(index="ProductID", columns="ProductName", values="Sales").fillna(0)
sparse_item_user = sparse.csr_matrix(user_item_matrix)

sparse_item_user

"""## Train the ALS model"""

# Train the ALS model
model = AlternatingLeastSquares(factors=50, regularization=0.01, iterations=15)
model.fit(sparse_item_user.T)  # Transpose so itâ€™s user-item

"""## Save the recommendation model as a pickle file"""

# Save the model
joblib.dump(model, "recommendation_model.pkl")

"""# Testing the recommendation model pickle file"""

# Load the trained recommendation model
model = joblib.load("/content/recommendation_model.pkl")

# Check if the model loaded correctly
print(type(model))  # Should print the model type (e.g., `implicit.cpu.als.AlternatingLeastSquares`)

"""## Use an example of a product id"""

# Example: Get recommendations for product with ID 101
product_id = 278
num_recommendations = 5

# Generate similar item recommendations
recommendations, scores = model.similar_items(product_id, num_recommendations)

recommendations

scores

"""## Displays similar products"""

# Display recommendations
print(f"Recommendations for Product ID {product_id}:")
for rec_id, score in zip(recommendations, scores):
    print(f"Product ID: {rec_id}, Similarity Score: {score}")

